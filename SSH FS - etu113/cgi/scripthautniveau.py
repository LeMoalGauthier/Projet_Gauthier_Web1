# -*- coding: utf-8 -*-
"""ScriptHautNiveau.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wYtCHB60VWgnig_l5ix2Y4l1FAm1bCeS

#Projet IA groupe 1 trinôme 6
##Emilie Le Rouzic
##Gauthier Le Moal
##Hippolyte Requet
"""

# from google.colab import drive
# drive.mount("/content/gdrive/")

# accidents_file = "/content/gdrive/MyDrive/Projet_IA/export_IA2.csv"

# """#Script pour créer les fichier .sav des modèles d'apprentissages

# <font color="red">Ne pas executer nous avons enregistré de notre côter les fichiers .sav</font><font color="orange"></br>trop long à exécuter 12 minutes environ
# """

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
import pickle

# # Charger le fichier CSV des accidents dans une DataFrame
# accidents_data = pd.read_csv(accidents_file, delimiter=";")
# #sample_data = accidents_data.sample(n=20000, random_state=42)

# # Remplacement des valeurs de 'descr_grav'
# accidents_data['descr_grav'] = accidents_data['descr_grav'].replace({
#     'Indemne': 'pas grave',
#     'Blessé léger': 'pas grave',
#     'Blessé hospitalisé': 'grave',
#     'Tué': 'grave'
# })

# columns_to_keep = ['descr_grav', 'latitude', 'longitude', 'descr_cat_veh',
#                     'descr_agglo', 'descr_athmo', 'descr_lum', 'descr_etat_surf',
#                     'descr_type_col','descr_dispo_secu']

# accidents_data = accidents_data[columns_to_keep]

# # Liste des colonnes à convertir
# columns_to_convert = ['descr_grav', 'descr_cat_veh', 'descr_agglo', 'descr_athmo', 'descr_lum',
#                       'descr_etat_surf', 'descr_type_col','descr_dispo_secu']

# # Conversion en float des latitudes et des longitudes
# accidents_data["latitude"] = accidents_data["latitude"].str.replace(',', '.').astype(float)
# accidents_data["longitude"] = accidents_data["longitude"].str.replace(',', '.').astype(float)

# # Création de l'objet LabelEncoder
# le = LabelEncoder()
# for var in columns_to_convert:
#     accidents_data[var] = le.fit_transform(accidents_data[var])

# # Séparer les features (X) et les labels (y) à partir du jeu de données après le label encoding
# X = accidents_data.drop('descr_grav', axis=1)
# y = accidents_data['descr_grav']

# # Ajuster le modèle aux données d'entraînement
# svm = SVC(probability=True)
# svm.fit(X, y)

# rf = RandomForestClassifier()
# rf.fit(X, y)

# mlp = MLPClassifier(max_iter=1000)
# mlp.fit(X, y)

# #enregistrement dans les fichier .sav
# pickle.dump(svm,open("svm.sav",'wb'))
# pickle.dump(rf,open("rf.sav",'wb'))
# pickle.dump(mlp,open("mlp.sav",'wb'))

"""#Scipt qui utilise les méthodes SVM RF MLP pour prédire la gravité d'un accident"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
import json
import pickle

def haut_niveau_predict_accident(accident_info, method):

    accident_info_reordered = pd.DataFrame.from_dict([accident_info], orient='columns')
    accident_info_reordered = accident_info_reordered[X.columns]

    if method == 'SVM':
        svm = pickle.load(open('svm.sav','rb'))
        predicted_class = svm.predict(accident_info_reordered)
    elif method == 'Random Forest':
        rf = pickle.load(open('rf.sav','rb'))
        predicted_class = rf.predict(accident_info_reordered)
    elif method == 'MLP':
        mlp = pickle.load(open('mlp.sav','rb'))
        predicted_class = mlp.predict(accident_info_reordered)

    # Convertir la prédiction en "grave" ou "pas grave"
    predicted_class_string = "grave" if predicted_class[0] == 0 else "pas grave"

    # Retourner la classe de l'accident sous forme de JSON
    result = {'descr_grav': predicted_class_string}
    json_result = json.dumps(result)

    return json_result

# Exemple d'utilisation du script
accident_info = {
    'descr_cat_veh': 21,
    'descr_agglo': 1,
    'descr_lum': 3,
    'descr_athmo': 0,  # 0
    'descr_etat_surf': 8,  # 8
    'descr_type_col': 0,
    'latitude': 47.1167,
    'longitude': -2.1000,
    'descr_dispo_secu':7
}  # Remplacez les features par les informations réelles de l'accident
#modifier de type de méthode :
#SVM
#Random Forest
#MLP
method = 'SVM'
predicted_class_json = haut_niveau_predict_accident(accident_info, method)
print(predicted_class_json)